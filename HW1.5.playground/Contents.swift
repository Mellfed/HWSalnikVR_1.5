import UIKit
/*:
 ## Задание 1
 Создайте словарь, который содержит результаты игр спортивной команды. Ключом словаря должно быть название команды соперника, а в качестве значения должен быть массив с результатами игр с этим соперником. Необходимо вывести на консоль результаты игр. Выглядить это должно примерно следующим образом:
 
 - Игра с Салават Юлаев - 3:6
 
 - Игра с Салават Юлаев - 5:5
 
 - Игра с Салават Юлаев - N/A
 
 - Игра с Авангард - 2:1
  
 - Игра с АкБарс - 3:3
 
 - Игра с АкБарс - 1:2
 */
let resultOfMath: [String: [String]] = ["Салават Юлаев" : ["3:6", "5:5", "N/A"], "Авангард" : ["2:1"], "АкБарс" : ["3:3", "1:2"]]

for (key, value) in resultOfMath {
    for value in value {
        print("Игра с \(key) - \(value)")
    }
}
/*:
## Задание 2
Создайте функцию, которая считает общую сумму денег, хранящихся в кошельке. Вызовите функцию и передайте в неё кошелек с деньгами. В кошельке могут храниться купюры различного достоинства от 50 до 5000 рублей.
*/
//func calculateMoney (inWallet wallet: Int...) -> (Int) {
//    var sum = 0
//    for value in wallet {
//        sum += value
//    }
//    return sum
//}

//calculateMoney(inWallet: 50, 100, 200, 500, 1000, 2000, 5000, 5000, 5000)

// Либо можно кошелёк представить через массив

func calculateMoney (inWallet wallet: [Int]) -> (Int) {
    var sum = 0
    for value in wallet {
        sum += value
    }
    return sum
}

let wallet = [50, 100, 200, 500, 1000, 2000, 5000, 5000, 5000]

calculateMoney(inWallet: wallet)
/*:
 ## Задание 3
 3.1 Создайте функцию, которая определяет является ли число четным. В случае, если число является четным, функция должна возвращать `true`. Иначе - `false`.
 */
func calculateEven (Numbers n: Int) -> (Bool) {
    n % 2 == 0
}

calculateEven(Numbers: 77)
/*:
 3.2 Создайте функцию, которая определяет делится ли число на *3* без остатка. Функция так же должна возвращать булево значение.
 */
func calculateDivisionBy3 (Numbers n: Int) -> (Bool) {
    n % 3 == 0
}

calculateDivisionBy3(Numbers: 33)
/*:
 3.3 Создайте функцию, которая возвращает возрастающий массив чисел в интервале от *x* до *y*. Данный интервал должен задаваться при вызове функции при помощи параметров. Вы должны самостоятельно реализовать логику создания массива. Если хотите усложить задание, то можете возвращать несортированный массив чисел в заданном интервале. Главное, что бы числа были уникальными и не повторялись. При этом количество элементов массива должно соответсвовать количеству элементов заданного интервала.
 */

func createArray (x: Int, y: Int) -> [Int] {
    var arrayOfNumber: [Int] = []
    var b = x
    arrayOfNumber.append(b)
    while b < y {
        b += 1
        arrayOfNumber.append(b)
    }
    return arrayOfNumber
}
/*:
3.4 Создайте массив чисел от *1* до *100*, используя для этого вышесозданную функцию
 */

let arrayOfNumber = createArray(x: 1, y: 100)

arrayOfNumber
/*:
 3.5 Создайте функцию для фильтрации переданного в неё массива и отфильтруйте при помощи неё массив из задания **3.4**. Функция должна возвращать новый массив без четных чисел или без чисел, кратных трем. Для определения фильтруемых значений используейте ранее созданные функции из заданий **3.1** и **3.2**.
 */
func filterArray(someArray a: [Int], filter f: (Int) -> Bool) -> [Int] {
    var filtered: [Int] = []
    for number in a {
        if f(number) {
            continue
        }
        filtered.append(number)
    }
    return filtered
}

filterArray(someArray: arrayOfNumber, filter: calculateDivisionBy3) // без чисел которые делятся на 3

filterArray(someArray: arrayOfNumber, filter: calculateEven)       // без чётных

